<?php
namespace Admin\Bai01QuanlySv\Controllers;

use Admin\Bai01QuanlySv\Models\UserModel;
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

require_once __DIR__ . '/../../vendor/autoload.php';


class UserController
{
    private UserModel $userModel;

    public function __construct()
    {
        $this->userModel = new UserModel();
    }

    // üßæ Hi·ªÉn th·ªã form ƒëƒÉng k√Ω
    public function showRegisterForm(string $error = '', string $success = ''): void
    {
        include __DIR__ . '/../../views/dangky.php';
    }

    // ‚ûï X·ª≠ l√Ω ƒëƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
    public function register(): void
    {
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $name = trim($_POST['name'] ?? '');
            $username = trim($_POST['username'] ?? '');
            $email = trim($_POST['email'] ?? '');
            $password = $_POST['password'] ?? '';

            if (empty($name) || empty($username) || empty($email) || empty($password)) {
                $error = "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!";
                $this->showRegisterForm($error);
                return;
            }

            // ‚úÖ T·∫°o ng∆∞·ªùi d√πng m·ªõi
            if ($this->userModel->createUser($name, $username, $email, $password)) {

                // ‚úÖ Sau khi t·∫°o th√†nh c√¥ng ‚Üí g·ª≠i email x√°c nh·∫≠n
                $this->sendConfirmEmail($email, $name);

                $success = "‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n.";
                $this->showLoginForm('', $success);

            } else {
                $error = "‚ùå Username ho·∫∑c Email ƒë√£ t·ªìn t·∫°i!";
                $this->showRegisterForm($error);
            }
        } else {
            $this->showRegisterForm();
        }
    }

    // üì® H√†m g·ª≠i email x√°c nh·∫≠n
   private function sendConfirmEmail(string $email, string $name): void
{
    $mail = new PHPMailer(true);

    try {
        // C·∫•u h√¨nh SMTP Gmail
        $mail->isSMTP();
        $mail->Host = 'smtp.gmail.com';
        $mail->SMTPAuth = true;

        // ‚ö†Ô∏è S·ª≠ d·ª•ng ch√≠nh email th·∫≠t c·ªßa b·∫°n v√† App Password
        $mail->Username = 'dvkhiem-cntt17@tdu.edu.vn';
        $mail->Password = 'ggxa bstd nuai hpvf';  // App password 16 k√Ω t·ª±
        $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
        $mail->Port = 587;
        $mail->CharSet = 'UTF-8';

        // Ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n
        $mail->setFrom('dvkhiem-cntt17@tdu.edu.vn', 'H·ªá th·ªëng Qu·∫£n l√Ω Sinh vi√™n');
        $mail->addAddress($email, $name);

        // N·ªôi dung email
        $mail->isHTML(true);
        $mail->Subject = 'X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n';
        $mail->Body = "
            <h2>Xin ch√†o {$name}!</h2>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i h·ªá th·ªëng c·ªßa ch√∫ng t√¥i.</p>
            <p>Nh·∫•n v√†o li√™n k·∫øt d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n:</p>
            <p><a href='http://localhost/bai01_quanly_sv/public/index.php?action=verify&email={$email}'>
                üëâ X√°c nh·∫≠n ƒëƒÉng k√Ω
            </a></p>
            <br>
            <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng k√Ω, vui l√≤ng b·ªè qua email n√†y.</p>
        ";

        $mail->send();
    } catch (Exception $e) {
        error_log("‚ùå Kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n: " . $mail->ErrorInfo);
    }
}

    // üîë X·ª≠ l√Ω ƒëƒÉng nh·∫≠p (gi·ªØ nguy√™n)
    public function login(): void
    {
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $username = trim($_POST['username'] ?? '');
            $password = $_POST['password'] ?? '';

            $user = $this->userModel->findUserByUsername($username);

            if ($user && password_verify($password, $user['password'])) {
                $_SESSION['user_id'] = $user['id'];
                $_SESSION['user_name'] = $user['name'];
                header('Location: index.php');
                exit;
            } else {
                $error = "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!";
                $this->showLoginForm($error);
            }
        } else {
            $this->showLoginForm();
        }
    }

    public function showLoginForm(string $error = '', string $success = ''): void
    {
        include __DIR__ . '/../../views/dangnhap.php';
    }

    public function logout(): void
    {
        session_destroy();
        header("Location: index.php?action=login");
        exit;
    }
    public function verify(string $email): void
{
    if ($this->userModel->verifyUser($email)) {
        $success = "üéâ X√°c nh·∫≠n t√†i kho·∫£n th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p.";
    } else {
        $error = "Li√™n k·∫øt x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.";
    }
    $this->showLoginForm($error ?? '', $success ?? '');
}
// Hi·ªÉn th·ªã form ƒë·ªïi m·∫≠t kh·∫©u
    public function changePasswordForm() {
        require_once __DIR__ . '/../../views/doimatkhau.php';
    }

    // X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u
    public function changePasswordSubmit() {
        session_start();
        require_once __DIR__ . '/../../src/auth.php';
        $userId = $_SESSION['user_id'];
        $oldPassword = $_POST['old_password'] ?? '';
        $newPassword = $_POST['new_password'] ?? '';
        $confirmPassword = $_POST['confirm_password'] ?? '';

        if ($newPassword !== $confirmPassword) {
            echo "<script>alert('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!'); history.back();</script>";
            exit;
        }

        $user = $this->userModel->getUserById($userId);

        if (!$user || !password_verify($oldPassword, $user['password'])) {
            echo "<script>alert('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!'); history.back();</script>";
            exit;
        }
        $newHashed = password_hash($newPassword, PASSWORD_DEFAULT);
        if ($this->userModel->updatePassword($userId, $newHashed)) {
            echo "<script>alert('‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!'); window.location='index.php?action=dashboard';</script>";
        } else {
            echo "<script>alert('‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u!'); history.back();</script>";
        }
    }

}
